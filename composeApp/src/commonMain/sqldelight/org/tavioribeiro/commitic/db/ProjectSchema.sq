CREATE TABLE projects (
  project_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  directory_path TEXT NOT NULL
);

CREATE TABLE branches (
  branch_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  project_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  FOREIGN KEY (project_id) REFERENCES projects(project_id) ON DELETE CASCADE
);

CREATE TABLE commits (
  commit_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  branch_id INTEGER NOT NULL,
  message TEXT NOT NULL,
  timestamp INTEGER NOT NULL,
  FOREIGN KEY (branch_id) REFERENCES branches(branch_id) ON DELETE CASCADE
);


-- -------------------------------- CONSULTAS --------------------------------

-- INSERTS
insertProject:
INSERT INTO projects (name, directory_path)
VALUES (?, ?);

insertBranch:
INSERT INTO branches (project_id, name)
VALUES (?, ?);

insertCommit:
INSERT INTO commits (branch_id, message, timestamp)
VALUES (?, ?, ?);


-- UPDATES
updateProject:
UPDATE projects SET name = ?, directory_path = ? WHERE project_id = ?;

updateBranch:
UPDATE branches SET name = ? WHERE branch_id = ?;

updateCommit:
UPDATE commits SET message = ? WHERE commit_id = ?;


-- DELETES
deleteProjectById:
DELETE FROM projects WHERE project_id = ?;

deleteBranchById:
DELETE FROM branches WHERE branch_id = ?;

deleteCommitById:
DELETE FROM commits WHERE commit_id = ?;


-- GETTERS (SELECTS)
getAllProjects:
SELECT * FROM projects ORDER BY project_id DESC;

getProjectById:
SELECT * FROM projects WHERE project_id = ?;

getAllBranches:
SELECT * FROM branches ORDER BY branch_id DESC;

getBranchesByProjectId:
SELECT * FROM branches WHERE project_id = ? ORDER BY branch_id DESC;

getBranchById:
SELECT * FROM branches WHERE branch_id = ?;

getAllCommits:
SELECT * FROM commits ORDER BY commit_id DESC;

getCommitsByBranchId:
SELECT * FROM commits WHERE branch_id = ? ORDER BY timestamp DESC;

getCommitById:
SELECT * FROM commits WHERE commit_id = ?;


-- GETTERS COM JOIN (SELECTS WITH JOIN)
getProjectWithBranches:
SELECT p.project_id,
       p.name AS project_name,
       p.directory_path,
       b.branch_id,
       b.name AS branch_name
FROM projects p
LEFT JOIN branches b ON b.project_id = p.project_id
WHERE p.project_id = ?
ORDER BY b.branch_id DESC;

getProjectWithBranchesAndCommits:
SELECT p.project_id,
       p.name AS project_name,
       p.directory_path,
       b.branch_id,
       b.name AS branch_name,
       c.commit_id,
       c.message,
       c.timestamp
FROM projects p
LEFT JOIN branches b ON b.project_id = p.project_id
LEFT JOIN commits c ON c.branch_id = b.branch_id
WHERE p.project_id = ?
ORDER BY b.branch_id DESC, c.timestamp DESC;


getAllBranchesWithCommits:
SELECT b.branch_id,
       b.project_id,
       b.name AS branch_name,
       c.commit_id,
       c.message,
       c.timestamp
FROM branches b
LEFT JOIN commits c ON c.branch_id = b.branch_id
ORDER BY b.branch_id DESC, c.timestamp DESC;